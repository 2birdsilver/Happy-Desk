{"ast":null,"code":"import{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// 쿠키를 가져오는 함수\nfunction getCookie(key){var result=null;var cookie=document.cookie.split(';');cookie.some(function(item){item=item.replace(' ','');var dic=item.split('=');if(key===dic[0]){result=dic[1];return true;}});return result;}// HTTP 요청을 보내는 함수\nconst httpRequest=async(method,url,body,success,fail)=>{try{const response=await fetch(url,{method:method,headers:{'Authorization':'Bearer '+localStorage.getItem('access_token'),'Content-Type':'application/json'},body:body});// access token이 유효한 경우\nif(response.status===200||response.status===201){var user=await response.json();success(user);// access token이 만료된 경우\n}else if(response.status===401&&getCookie('refresh_token')){const res=await fetch('/api/token',{method:'POST',headers:{Authorization:'Bearer '+localStorage.getItem('access_token'),'Content-Type':'application/json'},body:JSON.stringify({refreshToken:getCookie('refresh_token')})});if(res.ok){const result=await res.json();localStorage.setItem('access_token',result.accessToken);await httpRequest(method,url,body,success,fail);}else{fail();}// 로그인 되지 않은 경우\n}else{fail();}// 오류가 발생한 경우\n}catch(error){fail();}};// 사용자 정보를 가져오는 함수\nconst getUserInfo=async()=>{var body=JSON.stringify({});let userInfo=null;function success(user){userInfo=user;};function fail(){userInfo=null;};await httpRequest('POST','/api/authenticated/userInfo',body,success,fail);if(userInfo!=null){console.log(\"user name: \"+userInfo.name);}else{console.log(\"비로그인한 회원입니다.\");}return userInfo;};// async function getUserInfo() {\n//   var body = JSON.stringify({});\n//   let userInfo = null;\n//   function success(user) {\n//     userInfo = user;\n//   };\n//   function fail() {\n//     userInfo = null;\n//   };\n//   await httpRequest('POST', '/api/authenticated/userInfo', body, success, fail);\n//   if (userInfo != null) {\n//     console.log(\"user name: \" + userInfo.name);\n//   } else {\n//     console.log(\"비로그인한 회원입니다.\")\n//   }\n//   return userInfo;\n// }\nuseEffect(()=>{},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,getUserInfo},children:children});};export const useAuth=()=>{return useContext(AuthContext);};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","getCookie","key","result","cookie","document","split","some","item","replace","dic","httpRequest","method","url","body","success","fail","response","fetch","headers","localStorage","getItem","status","json","res","Authorization","JSON","stringify","refreshToken","ok","setItem","accessToken","error","getUserInfo","userInfo","console","log","name","Provider","value","useAuth"],"sources":["C:/Users/seeunLee/Desktop/세은/개발 공부/프로젝트/guest-book/Happy-Desk/src/main/Happy-Desk-Front/src/components/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // 쿠키를 가져오는 함수\r\n  function getCookie(key) {\r\n    var result = null;\r\n    var cookie = document.cookie.split(';');\r\n    cookie.some(function (item) {\r\n      item = item.replace(' ', '');\r\n\r\n      var dic = item.split('=');\r\n\r\n      if (key === dic[0]) {\r\n        result = dic[1];\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // HTTP 요청을 보내는 함수\r\n  const httpRequest = async (method, url, body, success, fail) => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.getItem('access_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: body,\r\n      });\r\n\r\n      // access token이 유효한 경우\r\n      if (response.status === 200 || response.status === 201) {\r\n        var user = await response.json();\r\n        success(user);\r\n\r\n      // access token이 만료된 경우\r\n      } else if (response.status === 401 && getCookie('refresh_token')) {\r\n        const res = await fetch('/api/token', {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: 'Bearer ' + localStorage.getItem('access_token'),\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            refreshToken: getCookie('refresh_token'),\r\n          }),\r\n        });\r\n\r\n        if (res.ok) {\r\n          const result = await res.json();\r\n          localStorage.setItem('access_token', result.accessToken);\r\n          await httpRequest(method, url, body, success, fail);\r\n        } else {\r\n          fail();\r\n        }\r\n\r\n      // 로그인 되지 않은 경우\r\n      } else {\r\n        fail();\r\n      }\r\n    \r\n    // 오류가 발생한 경우\r\n    } catch (error) {\r\n      fail();\r\n    }\r\n  };\r\n\r\n  // 사용자 정보를 가져오는 함수\r\n  const getUserInfo = async () => {\r\n    var body = JSON.stringify({});\r\n    let userInfo = null;\r\n  \r\n    function success(user) {\r\n      userInfo = user;\r\n    };\r\n  \r\n    function fail() {\r\n      userInfo = null;\r\n    };\r\n  \r\n    await httpRequest('POST', '/api/authenticated/userInfo', body, success, fail);\r\n  \r\n    if (userInfo != null) {\r\n      console.log(\"user name: \" + userInfo.name);\r\n    } else {\r\n      console.log(\"비로그인한 회원입니다.\")\r\n    }\r\n    \r\n    return userInfo;\r\n  };\r\n\r\n  // async function getUserInfo() {\r\n  //   var body = JSON.stringify({});\r\n  //   let userInfo = null;\r\n  \r\n  //   function success(user) {\r\n  //     userInfo = user;\r\n  //   };\r\n  \r\n  //   function fail() {\r\n  //     userInfo = null;\r\n  //   };\r\n  \r\n  //   await httpRequest('POST', '/api/authenticated/userInfo', body, success, fail);\r\n  \r\n  //   if (userInfo != null) {\r\n  //     console.log(\"user name: \" + userInfo.name);\r\n  //   } else {\r\n  //     console.log(\"비로그인한 회원입니다.\")\r\n  //   }\r\n    \r\n  //   return userInfo;\r\n  // }\r\n  \r\n\r\n  useEffect(() => {\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, getUserInfo }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}