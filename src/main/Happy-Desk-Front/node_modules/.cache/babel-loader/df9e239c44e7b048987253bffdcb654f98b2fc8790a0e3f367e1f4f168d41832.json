{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seeunLee\\\\Desktop\\\\\\uC138\\uC740\\\\\\uAC1C\\uBC1C \\uACF5\\uBD80\\\\\\uD504\\uB85C\\uC81D\\uD2B8\\\\guest-book\\\\Happy-Desk\\\\Happy-Desk-Front\\\\src\\\\pages\\\\Memo.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport keyboard from '../images/keyboard.png';\nimport mouse from '../images/mouse.png';\nimport anonymous from '../images/anonymous-icon3.png';\nimport authenticated from '../images/authenticated-icon3.png';\nimport Modal from '../components/MemoDetail';\nimport PasswordModal from '../components/PasswordModal';\nimport keyboardBased from '../images/keyboard.png';\nimport mouseBased from '../images/mouse.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Memo() {\n  _s();\n  const {\n    id\n  } = useParams(); // URL에서 id 값을 가져오기\n  const navigate = useNavigate(); // 페이지 네비게이션을 위한 Hook\n  const [memos, setMemos] = useState([]); // 메모 목록 상태 관리\n  const [name, setName] = useState(''); // 사용자 이름 상태 관리\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 열림/닫힘 상태 관리\n  const [modalContent, setModalContent] = useState(''); // 모달에 표시될 내용 관리\n  const [modalDate, setModalDate] = useState(''); // 모달에 표시될 날짜 관리\n  const [modalWriter, setModalWriter] = useState('');\n  const [modalShape, setModalShape] = useState(''); // 모달 모양(디자인) 상태 관리\n  const [editingMemoId, setEditingMemoId] = useState(null); //수정 상태 관리\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n  const [keyboardUrl, setKeyboardUrl] = useState('');\n  const [mouseUrl, setMouseUrl] = useState('');\n  useEffect(() => {\n    // Fetch user info\n    const fetchUserInfo = async () => {\n      try {\n        const response = await fetch(`/members/${id}`);\n        const data = await response.json();\n        setName(data.name);\n      } catch (error) {\n        console.error(\"Error fetching user info:\", error);\n      }\n    };\n\n    // Fetch memos\n    const fetchMemoData = async () => {\n      try {\n        const response = await fetch(`/api/memo/${id}`);\n        if (!response.ok) throw new Error('Failed to fetch memos.');\n        const data = await response.json();\n        setMemos(data);\n      } catch (error) {\n        console.error(\"Error fetching memos:\", error);\n      }\n    };\n    const fetchKeyboardImage = async () => {\n      try {\n        const response = await fetch(`/auth/img/keyboard/${id}`);\n        if (!response.ok) throw new Error('Failed to fetch keyboard image.');\n        const blob = await response.blob();\n        const imageUrl = URL.createObjectURL(blob);\n        setKeyboardUrl(imageUrl);\n      } catch (error) {\n        setKeyboardUrl(keyboardBased); // 오류 시 로컬 이미지 사용\n        console.error(\"Error fetching keyboard image:\", error);\n      }\n    };\n    const fetchMouseImage = async () => {\n      try {\n        const response = await fetch(`/auth/img/mouse/${id}`);\n        if (!response.ok) throw new Error('Failed to fetch mouse image.');\n        const blob = await response.blob();\n        const imageUrl = URL.createObjectURL(blob);\n        setMouseUrl(imageUrl);\n      } catch (error) {\n        setMouseUrl(mouseBased); // 오류 시 로컬 이미지 사용\n        console.error(\"Error fetching mouse image:\", error);\n      }\n    };\n    fetchUserInfo();\n    fetchMemoData();\n    fetchKeyboardImage();\n    fetchMouseImage();\n  }, [id]);\n\n  // 메모 작성 페이지로 이동하는 함수\n  const goToCreateMemo = () => {\n    navigate(`/postit/${id}/`);\n  };\n\n  // 홈 페이지로 이동하는 함수\n  const goToHome = () => {\n    navigate('/');\n  };\n\n  // 프린트\n  const getPrintPaper = () => {\n    if (memos) {\n      navigate('/print', {\n        state: {\n          memos: memos,\n          name: name\n        }\n      });\n    }\n  };\n\n  // 메모 클릭 핸들러 함수\n  const handleMemoClick = memo => {\n    setModalDate(memo.date);\n    setModalContent(memo.content);\n    setModalWriter(memo.writer);\n    setEditingMemoId(memo.id);\n    setIsModalOpen(true);\n    setModalShape(memo.shape);\n  };\n\n  // 모달 닫기 함수\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalContent('');\n    setEditingMemoId(null);\n  };\n\n  // 메모 수정 페이지로 이동하는 함수\n  const handleEditClick = () => {\n    navigate(`/postit/${editingMemoId}?edit=true`);\n    setIsModalOpen(false);\n  };\n\n  // 메모 삭제 함수 수정\n  const handleDeleteClick = memoId => {\n    setIsPasswordModalOpen(true);\n    setEditingMemoId(memoId);\n  };\n\n  // 비밀번호 모달에서 확인을 눌렀을 때 실행될 함수\n  const handlePasswordConfirm = async password => {\n    console.log(\"입력된 비밀번호:\", password);\n    console.log(\"입력된 메모id:\", editingMemoId);\n    // 비밀번호와 메모 ID를 서버에 전송\n    try {\n      const response = await fetch('/api/memo/delete', {\n        method: 'POST',\n        // 메소드를 DELETE로 변경\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          memoId: editingMemoId,\n          // 삭제하려는 메모의 ID\n          password: password // 사용자가 입력한 비밀번호\n        })\n      });\n      if (response.status === 202) {\n        alert(\"메모를 삭제하였습니다.\");\n        closeModal();\n        setMemos(memos.filter(memo => memo.id !== editingMemoId));\n      } else if (response.status === 401) {\n        alert(\"비밀번호를 잘못 입력하였습니다. 비밀번호 문의는 leesu@kcc.co.kr\");\n      } else {\n        // 그 외의 경우, 일반적인 에러 처리\n        alert(\"메모 삭제 실패: 알 수 없는 에러 발생\");\n      }\n    } catch (error) {\n      console.error(\"메모 삭제 요청 중 오류 발생\", error);\n      alert(\"메모 삭제 과정에서 오류가 발생했습니다.\");\n      // 네트워크 오류 또는 요청 실패 처리\n    }\n\n    // 비밀번호 입력이 완료되면 모달을 닫음\n    setIsPasswordModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrap memo\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [name, \"\\uC5D0\\uAC8C \\uD3EC\\uC2A4\\uD2B8\\uC787\\uC744 \\uBD99\\uC5EC\\uBD10!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btns\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: goToHome,\n        children: \"\\uD83C\\uDFE0 Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-print\",\n        onClick: getPrintPaper,\n        children: \"\\uD83D\\uDCE9 Print\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: goToCreateMemo,\n        children: \"\\uD83D\\uDCDD Memo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notebook\",\n      children: memos.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notes-container\",\n        children: memos.map(memo => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `note ${memo.shape} ${memo.color}` // memo.shape 값에 따라 'note square' 또는 'note heart' 클래스 적용\n          ,\n\n          onClick: () => handleMemoClick(memo),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"writer\",\n            children: [memo.authenticatedWriter > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: authenticated,\n              alt: \"Authenticated\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 52\n            }, this), memo.writer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-content\",\n            children: memo.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this)]\n        }, memo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-message\",\n        children: [name, \"\\uB2D8\\uAED8 \\uCCAB \\uBC88\\uC9F8 \\uBA54\\uBAA8\\uB97C \\uB0A8\\uACA8\\uBCF4\\uC138\\uC694!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      className: `MemoDetail-content ${modalShape === 'heart' ? 'heart' : ''}`,\n      content: modalContent,\n      date: modalDate,\n      writer: modalWriter,\n      onClose: closeModal,\n      onDelete: () => handleDeleteClick(editingMemoId),\n      onEdit: () => handleEditClick(editingMemoId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), isPasswordModalOpen && /*#__PURE__*/_jsxDEV(PasswordModal, {\n      isOpen: isPasswordModalOpen,\n      onClose: () => setIsPasswordModalOpen(false),\n      onConfirm: handlePasswordConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"km\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"keyboard\",\n        src: keyboardUrl,\n        alt: \"keyboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"mouse\",\n        src: mouseUrl,\n        alt: \"mouse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(Memo, \"1UDU0CP35xctjsqCJ1QD540xp9w=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Memo;\nexport default Memo;\nvar _c;\n$RefreshReg$(_c, \"Memo\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","useNavigate","keyboard","mouse","anonymous","authenticated","Modal","PasswordModal","keyboardBased","mouseBased","jsxDEV","_jsxDEV","Memo","_s","id","navigate","memos","setMemos","name","setName","isModalOpen","setIsModalOpen","modalContent","setModalContent","modalDate","setModalDate","modalWriter","setModalWriter","modalShape","setModalShape","editingMemoId","setEditingMemoId","isPasswordModalOpen","setIsPasswordModalOpen","keyboardUrl","setKeyboardUrl","mouseUrl","setMouseUrl","fetchUserInfo","response","fetch","data","json","error","console","fetchMemoData","ok","Error","fetchKeyboardImage","blob","imageUrl","URL","createObjectURL","fetchMouseImage","goToCreateMemo","goToHome","getPrintPaper","state","handleMemoClick","memo","date","content","writer","shape","closeModal","handleEditClick","handleDeleteClick","memoId","handlePasswordConfirm","password","log","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","alert","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","color","authenticatedWriter","src","alt","onClose","onDelete","onEdit","isOpen","onConfirm","_c","$RefreshReg$"],"sources":["C:/Users/seeunLee/Desktop/세은/개발 공부/프로젝트/guest-book/Happy-Desk/Happy-Desk-Front/src/pages/Memo.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport keyboard from '../images/keyboard.png';\r\nimport mouse from '../images/mouse.png';\r\nimport anonymous from '../images/anonymous-icon3.png';\r\nimport authenticated from '../images/authenticated-icon3.png';\r\nimport Modal from '../components/MemoDetail';\r\nimport PasswordModal from '../components/PasswordModal';\r\nimport keyboardBased from '../images/keyboard.png';\r\nimport mouseBased  from '../images/mouse.png';\r\n\r\n\r\nfunction Memo() {\r\n  const { id } = useParams(); // URL에서 id 값을 가져오기\r\n  const navigate = useNavigate(); // 페이지 네비게이션을 위한 Hook\r\n  const [memos, setMemos] = useState([]); // 메모 목록 상태 관리\r\n  const [name, setName] = useState(''); // 사용자 이름 상태 관리\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 열림/닫힘 상태 관리\r\n  const [modalContent, setModalContent] = useState(''); // 모달에 표시될 내용 관리\r\n  const [modalDate, setModalDate] = useState(''); // 모달에 표시될 날짜 관리\r\n  const [modalWriter, setModalWriter] = useState('');\r\n  const [modalShape, setModalShape] = useState('');  // 모달 모양(디자인) 상태 관리\r\n  const [editingMemoId, setEditingMemoId] = useState(null);//수정 상태 관리\r\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\r\n\r\n  const [keyboardUrl, setKeyboardUrl] = useState('');\r\n  const [mouseUrl, setMouseUrl] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    // Fetch user info\r\n    const fetchUserInfo = async () => {\r\n      try {\r\n        const response = await fetch(`/members/${id}`);\r\n        const data = await response.json();\r\n        setName(data.name);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user info:\", error);\r\n      }\r\n    };\r\n\r\n    // Fetch memos\r\n    const fetchMemoData = async () => {\r\n      try {\r\n        const response = await fetch(`/api/memo/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch memos.');\r\n        const data = await response.json();\r\n        setMemos(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching memos:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchKeyboardImage = async () => {\r\n      try {\r\n        const response = await fetch(`/auth/img/keyboard/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch keyboard image.');\r\n        const blob = await response.blob();\r\n        const imageUrl = URL.createObjectURL(blob);\r\n        setKeyboardUrl(imageUrl);\r\n      } catch (error) {\r\n        setKeyboardUrl(keyboardBased); // 오류 시 로컬 이미지 사용\r\n        console.error(\"Error fetching keyboard image:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchMouseImage = async () => {\r\n      try {\r\n        const response = await fetch(`/auth/img/mouse/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch mouse image.');\r\n        const blob = await response.blob();\r\n        const imageUrl = URL.createObjectURL(blob);\r\n        setMouseUrl(imageUrl);\r\n      } catch (error) {\r\n        setMouseUrl(mouseBased); // 오류 시 로컬 이미지 사용\r\n        console.error(\"Error fetching mouse image:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserInfo();\r\n    fetchMemoData();\r\n    fetchKeyboardImage();\r\n    fetchMouseImage();\r\n\r\n  }, [id]);\r\n\r\n  // 메모 작성 페이지로 이동하는 함수\r\n  const goToCreateMemo = () => {\r\n    navigate(`/postit/${id}/`);\r\n  };\r\n\r\n  // 홈 페이지로 이동하는 함수\r\n  const goToHome = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  // 프린트\r\n  const getPrintPaper = () => {\r\n    if (memos) {\r\n      navigate('/print', { state: { memos: memos, name: name } });\r\n    }\r\n  }\r\n\r\n\r\n  // 메모 클릭 핸들러 함수\r\n  const handleMemoClick = (memo) => {\r\n    setModalDate(memo.date);\r\n    setModalContent(memo.content);\r\n    setModalWriter(memo.writer)\r\n    setEditingMemoId(memo.id);\r\n    setIsModalOpen(true);\r\n    setModalShape(memo.shape);\r\n  };\r\n\r\n  // 모달 닫기 함수\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setModalContent('');\r\n    setEditingMemoId(null);\r\n  };\r\n\r\n  // 메모 수정 페이지로 이동하는 함수\r\n  const handleEditClick = () => {\r\n    navigate(`/postit/${editingMemoId}?edit=true`);\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  // 메모 삭제 함수 수정\r\n  const handleDeleteClick = (memoId) => {\r\n    setIsPasswordModalOpen(true);\r\n    setEditingMemoId(memoId);\r\n  };\r\n\r\n  // 비밀번호 모달에서 확인을 눌렀을 때 실행될 함수\r\n  const handlePasswordConfirm = async (password) => {\r\n    console.log(\"입력된 비밀번호:\", password);\r\n    console.log(\"입력된 메모id:\", editingMemoId);\r\n    // 비밀번호와 메모 ID를 서버에 전송\r\n    try {\r\n      const response = await fetch('/api/memo/delete', {\r\n        method: 'POST', // 메소드를 DELETE로 변경\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          memoId: editingMemoId, // 삭제하려는 메모의 ID\r\n          password: password, // 사용자가 입력한 비밀번호\r\n        }),\r\n      });\r\n\r\n      if (response.status === 202) {\r\n        alert(\"메모를 삭제하였습니다.\");\r\n        closeModal();\r\n        setMemos(memos.filter(memo => memo.id !== editingMemoId));\r\n      } else if (response.status === 401) {\r\n        alert(\"비밀번호를 잘못 입력하였습니다. 비밀번호 문의는 leesu@kcc.co.kr\");\r\n      } else {\r\n        // 그 외의 경우, 일반적인 에러 처리\r\n        alert(\"메모 삭제 실패: 알 수 없는 에러 발생\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"메모 삭제 요청 중 오류 발생\", error);\r\n      alert(\"메모 삭제 과정에서 오류가 발생했습니다.\");\r\n      // 네트워크 오류 또는 요청 실패 처리\r\n    }\r\n\r\n    // 비밀번호 입력이 완료되면 모달을 닫음\r\n    setIsPasswordModalOpen(false);\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className='wrap memo'>\r\n      <h2>{name}에게 포스트잇을 붙여봐!</h2>\r\n      <div className='btns'>\r\n        <button className='btn' onClick={goToHome}>🏠 Home</button>\r\n        <button className='btn btn-print' onClick={getPrintPaper}>📩 Print</button>\r\n        <button className='btn' onClick={goToCreateMemo}>📝 Memo</button>\r\n      </div>\r\n\r\n      {/* 메모 목록 표시 영역 */}\r\n      <div className='notebook'>\r\n        {memos.length ? (\r\n          <div className=\"notes-container\">\r\n            {memos.map(memo => (\r\n              <div\r\n                className={`note ${memo.shape} ${memo.color}`} // memo.shape 값에 따라 'note square' 또는 'note heart' 클래스 적용\r\n                key={memo.id}\r\n                onClick={() => handleMemoClick(memo)}\r\n              >\r\n                <div className='writer'>\r\n                  {memo.authenticatedWriter > 0 && <img src={authenticated} alt=\"Authenticated\" />}\r\n                  {/* {!memo.authenticatedWriter && <img src={anonymous} alt=\"anonymous\" />} */}\r\n                  {memo.writer}\r\n                </div>\r\n                <div className='m-content'>{memo.content}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"empty-message\">{name}님께 첫 번째 메모를 남겨보세요!</div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 모달이 열렸을 때 표시될 컨텐츠 */}\r\n      {isModalOpen && (\r\n        <Modal\r\n          className={`MemoDetail-content ${modalShape === 'heart' ? 'heart' : ''}`}\r\n          content={modalContent}\r\n          date={modalDate}\r\n          writer={modalWriter}\r\n          onClose={closeModal}\r\n          onDelete={() => handleDeleteClick(editingMemoId)}\r\n          onEdit={() => handleEditClick(editingMemoId)}\r\n        />\r\n      )}\r\n\r\n      {isPasswordModalOpen && (\r\n        <PasswordModal\r\n          isOpen={isPasswordModalOpen}\r\n          onClose={() => setIsPasswordModalOpen(false)}\r\n          onConfirm={handlePasswordConfirm}\r\n        />\r\n      )}\r\n\r\n      {/* 키보드와 마우스 이미지 */}\r\n      <div className='km'>\r\n        <img className='keyboard' src={keyboardUrl} alt=\"keyboard\" />\r\n        <img className='mouse' src={mouseUrl} alt=\"mouse\" />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Memo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}