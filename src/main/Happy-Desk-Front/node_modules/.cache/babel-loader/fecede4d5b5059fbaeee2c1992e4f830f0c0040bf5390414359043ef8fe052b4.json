{"ast":null,"code":"import React,{useEffect,useState,useCallback}from'react';import{useParams,useNavigate}from'react-router-dom';import keyboard from'../images/keyboard.png';import mouse from'../images/mouse.png';import anonymous from'../images/anonymous-icon3.png';import authenticated from'../images/authenticated-icon3.png';import Modal from'../components/MemoDetail';import PasswordModal from'../components/PasswordModal';import keyboardBased from'../images/keyboard.png';import mouseBased from'../images/mouse.png';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function Memo(){const{id}=useParams();// URL에서 id 값을 가져오기\nconst navigate=useNavigate();// 페이지 네비게이션을 위한 Hook\nconst[memos,setMemos]=useState([]);// 메모 목록 상태 관리\nconst[name,setName]=useState('');// 사용자 이름 상태 관리\nconst[isModalOpen,setIsModalOpen]=useState(false);// 모달 열림/닫힘 상태 관리\nconst[modalContent,setModalContent]=useState('');// 모달에 표시될 내용 관리\nconst[modalDate,setModalDate]=useState('');// 모달에 표시될 날짜 관리\nconst[modalWriter,setModalWriter]=useState('');const[modalShape,setModalShape]=useState('');// 모달 모양(디자인) 상태 관리\nconst[editingMemoId,setEditingMemoId]=useState(null);//수정 상태 관리\nconst[isPasswordModalOpen,setIsPasswordModalOpen]=useState(false);const[keyboardUrl,setKeyboardUrl]=useState('');const[mouseUrl,setMouseUrl]=useState('');useEffect(()=>{// Fetch user info\nconst fetchUserInfo=async()=>{try{const response=await fetch(\"/members/\".concat(id));const data=await response.json();setName(data.name);}catch(error){console.error(\"Error fetching user info:\",error);}};// Fetch memos\nconst fetchMemoData=async()=>{try{const response=await fetch(\"/api/memo/\".concat(id));if(!response.ok)throw new Error('Failed to fetch memos.');const data=await response.json();setMemos(data);}catch(error){console.error(\"Error fetching memos:\",error);}};const fetchKeyboardImage=async()=>{try{const response=await fetch(\"/auth/img/keyboard/\".concat(id));if(!response.ok)throw new Error('Failed to fetch keyboard image.');const blob=await response.blob();const imageUrl=URL.createObjectURL(blob);setKeyboardUrl(imageUrl);}catch(error){setKeyboardUrl(keyboardBased);// 오류 시 로컬 이미지 사용\nconsole.error(\"Error fetching keyboard image:\",error);}};const fetchMouseImage=async()=>{try{const response=await fetch(\"/auth/img/mouse/\".concat(id));if(!response.ok)throw new Error('Failed to fetch mouse image.');const blob=await response.blob();const imageUrl=URL.createObjectURL(blob);setMouseUrl(imageUrl);}catch(error){setMouseUrl(mouseBased);// 오류 시 로컬 이미지 사용\nconsole.error(\"Error fetching mouse image:\",error);}};fetchUserInfo();fetchMemoData();fetchKeyboardImage();fetchMouseImage();},[id]);// 메모 작성 페이지로 이동하는 함수\nconst goToCreateMemo=()=>{navigate(\"/postit/\".concat(id,\"/\"));};// 홈 페이지로 이동하는 함수\nconst goToHome=()=>{navigate('/');};// 프린트\nconst getPrintPaper=()=>{if(memos){navigate('/print',{state:{memos:memos,name:name}});}};// 메모 클릭 핸들러 함수\nconst handleMemoClick=memo=>{setModalDate(memo.date);setModalContent(memo.content);setModalWriter(memo.writer);setEditingMemoId(memo.id);setIsModalOpen(true);setModalShape(memo.shape);};// 모달 닫기 함수\nconst closeModal=()=>{setIsModalOpen(false);setModalContent('');setEditingMemoId(null);};// 메모 수정 페이지로 이동하는 함수\nconst handleEditClick=()=>{navigate(\"/postit/\".concat(editingMemoId,\"?edit=true\"));setIsModalOpen(false);};// 메모 삭제 함수 수정\nconst handleDeleteClick=memoId=>{setIsPasswordModalOpen(true);setEditingMemoId(memoId);};// 비밀번호 모달에서 확인을 눌렀을 때 실행될 함수\nconst handlePasswordConfirm=async password=>{console.log(\"입력된 비밀번호:\",password);console.log(\"입력된 메모id:\",editingMemoId);// 비밀번호와 메모 ID를 서버에 전송\ntry{const response=await fetch('/api/memo/delete',{method:'POST',// 메소드를 DELETE로 변경\nheaders:{Authorization:'Bearer '+localStorage.getItem('access_token'),'Content-Type':'application/json'},body:JSON.stringify({memoId:editingMemoId,// 삭제하려는 메모의 ID\npassword:password// 사용자가 입력한 비밀번호\n})});if(response.status===202){alert(\"메모를 삭제하였습니다.\");closeModal();setMemos(memos.filter(memo=>memo.id!==editingMemoId));}else if(response.status===401){alert(\"비밀번호를 잘못 입력하였습니다. 비밀번호 문의는 leesu@kcc.co.kr\");}else{// 그 외의 경우, 일반적인 에러 처리\nalert(\"메모 삭제 실패: 알 수 없는 에러 발생\");}}catch(error){console.error(\"메모 삭제 요청 중 오류 발생\",error);alert(\"메모 삭제 과정에서 오류가 발생했습니다.\");// 네트워크 오류 또는 요청 실패 처리\n}// 비밀번호 입력이 완료되면 모달을 닫음\nsetIsPasswordModalOpen(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"wrap memo\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[name,\"\\uC5D0\\uAC8C \\uD3EC\\uC2A4\\uD2B8\\uC787\\uC744 \\uBD99\\uC5EC\\uBD10!\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"btns\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:goToHome,children:\"\\uD83C\\uDFE0 Home\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-print\",onClick:getPrintPaper,children:\"\\uD83D\\uDCE9 Print\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:goToCreateMemo,children:\"\\uD83D\\uDCDD Memo\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"notebook\",children:memos.length?/*#__PURE__*/_jsx(\"div\",{className:\"notes-container\",children:memos.map(memo=>/*#__PURE__*/_jsxs(\"div\",{className:\"note \".concat(memo.shape,\" \").concat(memo.color)// memo.shape 값에 따라 'note square' 또는 'note heart' 클래스 적용\n,onClick:()=>handleMemoClick(memo),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"writer\",children:[memo.authenticatedWriter>0&&/*#__PURE__*/_jsx(\"img\",{src:authenticated,alt:\"Authenticated\"}),memo.writer]}),/*#__PURE__*/_jsx(\"div\",{className:\"m-content\",children:memo.content})]},memo.id))}):/*#__PURE__*/_jsxs(\"div\",{className:\"empty-message\",children:[name,\"\\uB2D8\\uAED8 \\uCCAB \\uBC88\\uC9F8 \\uBA54\\uBAA8\\uB97C \\uB0A8\\uACA8\\uBCF4\\uC138\\uC694!\"]})}),isModalOpen&&/*#__PURE__*/_jsx(Modal,{className:\"MemoDetail-content \".concat(modalShape==='heart'?'heart':''),content:modalContent,date:modalDate,writer:modalWriter,onClose:closeModal,onDelete:()=>handleDeleteClick(editingMemoId),onEdit:()=>handleEditClick(editingMemoId)}),isPasswordModalOpen&&/*#__PURE__*/_jsx(PasswordModal,{isOpen:isPasswordModalOpen,onClose:()=>setIsPasswordModalOpen(false),onConfirm:handlePasswordConfirm}),/*#__PURE__*/_jsxs(\"div\",{className:\"km\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"keyboard\",src:keyboardUrl,alt:\"keyboard\"}),/*#__PURE__*/_jsx(\"img\",{className:\"mouse\",src:mouseUrl,alt:\"mouse\"})]})]});}export default Memo;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","useNavigate","keyboard","mouse","anonymous","authenticated","Modal","PasswordModal","keyboardBased","mouseBased","jsxs","_jsxs","jsx","_jsx","Memo","id","navigate","memos","setMemos","name","setName","isModalOpen","setIsModalOpen","modalContent","setModalContent","modalDate","setModalDate","modalWriter","setModalWriter","modalShape","setModalShape","editingMemoId","setEditingMemoId","isPasswordModalOpen","setIsPasswordModalOpen","keyboardUrl","setKeyboardUrl","mouseUrl","setMouseUrl","fetchUserInfo","response","fetch","concat","data","json","error","console","fetchMemoData","ok","Error","fetchKeyboardImage","blob","imageUrl","URL","createObjectURL","fetchMouseImage","goToCreateMemo","goToHome","getPrintPaper","state","handleMemoClick","memo","date","content","writer","shape","closeModal","handleEditClick","handleDeleteClick","memoId","handlePasswordConfirm","password","log","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","alert","filter","className","children","onClick","length","map","color","authenticatedWriter","src","alt","onClose","onDelete","onEdit","isOpen","onConfirm"],"sources":["C:/Users/seeunLee/Desktop/세은/개발 공부/프로젝트/guest-book/Happy-Desk/src/main/Happy-Desk-Front/src/pages/Memo.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport keyboard from '../images/keyboard.png';\r\nimport mouse from '../images/mouse.png';\r\nimport anonymous from '../images/anonymous-icon3.png';\r\nimport authenticated from '../images/authenticated-icon3.png';\r\nimport Modal from '../components/MemoDetail';\r\nimport PasswordModal from '../components/PasswordModal';\r\nimport keyboardBased from '../images/keyboard.png';\r\nimport mouseBased  from '../images/mouse.png';\r\n\r\n\r\nfunction Memo() {\r\n  const { id } = useParams(); // URL에서 id 값을 가져오기\r\n  const navigate = useNavigate(); // 페이지 네비게이션을 위한 Hook\r\n  const [memos, setMemos] = useState([]); // 메모 목록 상태 관리\r\n  const [name, setName] = useState(''); // 사용자 이름 상태 관리\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 열림/닫힘 상태 관리\r\n  const [modalContent, setModalContent] = useState(''); // 모달에 표시될 내용 관리\r\n  const [modalDate, setModalDate] = useState(''); // 모달에 표시될 날짜 관리\r\n  const [modalWriter, setModalWriter] = useState('');\r\n  const [modalShape, setModalShape] = useState('');  // 모달 모양(디자인) 상태 관리\r\n  const [editingMemoId, setEditingMemoId] = useState(null);//수정 상태 관리\r\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\r\n\r\n  const [keyboardUrl, setKeyboardUrl] = useState('');\r\n  const [mouseUrl, setMouseUrl] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    // Fetch user info\r\n    const fetchUserInfo = async () => {\r\n      try {\r\n        const response = await fetch(`/members/${id}`);\r\n        const data = await response.json();\r\n        setName(data.name);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user info:\", error);\r\n      }\r\n    };\r\n\r\n    // Fetch memos\r\n    const fetchMemoData = async () => {\r\n      try {\r\n        const response = await fetch(`/api/memo/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch memos.');\r\n        const data = await response.json();\r\n        setMemos(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching memos:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchKeyboardImage = async () => {\r\n      try {\r\n        const response = await fetch(`/auth/img/keyboard/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch keyboard image.');\r\n        const blob = await response.blob();\r\n        const imageUrl = URL.createObjectURL(blob);\r\n        setKeyboardUrl(imageUrl);\r\n      } catch (error) {\r\n        setKeyboardUrl(keyboardBased); // 오류 시 로컬 이미지 사용\r\n        console.error(\"Error fetching keyboard image:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchMouseImage = async () => {\r\n      try {\r\n        const response = await fetch(`/auth/img/mouse/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch mouse image.');\r\n        const blob = await response.blob();\r\n        const imageUrl = URL.createObjectURL(blob);\r\n        setMouseUrl(imageUrl);\r\n      } catch (error) {\r\n        setMouseUrl(mouseBased); // 오류 시 로컬 이미지 사용\r\n        console.error(\"Error fetching mouse image:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserInfo();\r\n    fetchMemoData();\r\n    fetchKeyboardImage();\r\n    fetchMouseImage();\r\n\r\n  }, [id]);\r\n\r\n  // 메모 작성 페이지로 이동하는 함수\r\n  const goToCreateMemo = () => {\r\n    navigate(`/postit/${id}/`);\r\n  };\r\n\r\n  // 홈 페이지로 이동하는 함수\r\n  const goToHome = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  // 프린트\r\n  const getPrintPaper = () => {\r\n    if (memos) {\r\n      navigate('/print', { state: { memos: memos, name: name } });\r\n    }\r\n  }\r\n\r\n\r\n  // 메모 클릭 핸들러 함수\r\n  const handleMemoClick = (memo) => {\r\n    setModalDate(memo.date);\r\n    setModalContent(memo.content);\r\n    setModalWriter(memo.writer)\r\n    setEditingMemoId(memo.id);\r\n    setIsModalOpen(true);\r\n    setModalShape(memo.shape);\r\n  };\r\n\r\n  // 모달 닫기 함수\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setModalContent('');\r\n    setEditingMemoId(null);\r\n  };\r\n\r\n  // 메모 수정 페이지로 이동하는 함수\r\n  const handleEditClick = () => {\r\n    navigate(`/postit/${editingMemoId}?edit=true`);\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  // 메모 삭제 함수 수정\r\n  const handleDeleteClick = (memoId) => {\r\n    setIsPasswordModalOpen(true);\r\n    setEditingMemoId(memoId);\r\n  };\r\n\r\n  // 비밀번호 모달에서 확인을 눌렀을 때 실행될 함수\r\n  const handlePasswordConfirm = async (password) => {\r\n    console.log(\"입력된 비밀번호:\", password);\r\n    console.log(\"입력된 메모id:\", editingMemoId);\r\n    // 비밀번호와 메모 ID를 서버에 전송\r\n    try {\r\n      const response = await fetch('/api/memo/delete', {\r\n        method: 'POST', // 메소드를 DELETE로 변경\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          memoId: editingMemoId, // 삭제하려는 메모의 ID\r\n          password: password, // 사용자가 입력한 비밀번호\r\n        }),\r\n      });\r\n\r\n      if (response.status === 202) {\r\n        alert(\"메모를 삭제하였습니다.\");\r\n        closeModal();\r\n        setMemos(memos.filter(memo => memo.id !== editingMemoId));\r\n      } else if (response.status === 401) {\r\n        alert(\"비밀번호를 잘못 입력하였습니다. 비밀번호 문의는 leesu@kcc.co.kr\");\r\n      } else {\r\n        // 그 외의 경우, 일반적인 에러 처리\r\n        alert(\"메모 삭제 실패: 알 수 없는 에러 발생\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"메모 삭제 요청 중 오류 발생\", error);\r\n      alert(\"메모 삭제 과정에서 오류가 발생했습니다.\");\r\n      // 네트워크 오류 또는 요청 실패 처리\r\n    }\r\n\r\n    // 비밀번호 입력이 완료되면 모달을 닫음\r\n    setIsPasswordModalOpen(false);\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className='wrap memo'>\r\n      <h2>{name}에게 포스트잇을 붙여봐!</h2>\r\n      <div className='btns'>\r\n        <button className='btn' onClick={goToHome}>🏠 Home</button>\r\n        <button className='btn btn-print' onClick={getPrintPaper}>📩 Print</button>\r\n        <button className='btn' onClick={goToCreateMemo}>📝 Memo</button>\r\n      </div>\r\n\r\n      {/* 메모 목록 표시 영역 */}\r\n      <div className='notebook'>\r\n        {memos.length ? (\r\n          <div className=\"notes-container\">\r\n            {memos.map(memo => (\r\n              <div\r\n                className={`note ${memo.shape} ${memo.color}`} // memo.shape 값에 따라 'note square' 또는 'note heart' 클래스 적용\r\n                key={memo.id}\r\n                onClick={() => handleMemoClick(memo)}\r\n              >\r\n                <div className='writer'>\r\n                  {memo.authenticatedWriter > 0 && <img src={authenticated} alt=\"Authenticated\" />}\r\n                  {/* {!memo.authenticatedWriter && <img src={anonymous} alt=\"anonymous\" />} */}\r\n                  {memo.writer}\r\n                </div>\r\n                <div className='m-content'>{memo.content}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"empty-message\">{name}님께 첫 번째 메모를 남겨보세요!</div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 모달이 열렸을 때 표시될 컨텐츠 */}\r\n      {isModalOpen && (\r\n        <Modal\r\n          className={`MemoDetail-content ${modalShape === 'heart' ? 'heart' : ''}`}\r\n          content={modalContent}\r\n          date={modalDate}\r\n          writer={modalWriter}\r\n          onClose={closeModal}\r\n          onDelete={() => handleDeleteClick(editingMemoId)}\r\n          onEdit={() => handleEditClick(editingMemoId)}\r\n        />\r\n      )}\r\n\r\n      {isPasswordModalOpen && (\r\n        <PasswordModal\r\n          isOpen={isPasswordModalOpen}\r\n          onClose={() => setIsPasswordModalOpen(false)}\r\n          onConfirm={handlePasswordConfirm}\r\n        />\r\n      )}\r\n\r\n      {/* 키보드와 마우스 이미지 */}\r\n      <div className='km'>\r\n        <img className='keyboard' src={keyboardUrl} alt=\"keyboard\" />\r\n        <img className='mouse' src={mouseUrl} alt=\"mouse\" />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Memo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}